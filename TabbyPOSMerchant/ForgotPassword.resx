<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJOXmgAAAAAAT1NWAj9CRAVBREYFVlteATAzNQCboKgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB0dHYALS4vADIzNAYwMTIpMjMzXDk4OIhAPz+lRUNCs0RDQrI/Pj6iNzg3gzIz
        M1UyNDUjNzk6BDIzNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACDgHwAMDAvADEwMAgxMTFLPz49qV5aWOaDfHf9oZeR/7Omnv+5rKP/uKqh/66g
        mP+Zjob/e3Jt+1hUUuE9PDyeMjM0PjM0NAUzNDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAASEdGACIjIwAvLy8mPDw8oXR0dPS9u7r/6ebj//n18v/8+Pb//Pj2//r2
        9P/48/D/9e3p/+/k3f/k1cz/z760/6GUjP9hXFnuNzc3jzAxMhoqKywAVVNSAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD08PAAnKCgALi4uPExLSs+kn53/8/Lx////////////////////
        //////////////////////////////38+//28Oz/6tzT/9HAtf+KgHr/Q0FAvjAwMCstLi4APDw7AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMzMzADMzMxwzMzM8NDQ0BDExMTRPTk3Xu7Wx//Tr5v/8+ff/////////
        ///////////////////////////////////////////////////9/Pz/7+Te/97Mwf+fk4v/RUNCxjAx
        MSMzMzMLMzMzQDMzMxMzMzMAAAAAAAAAAAAzMzMAMzMzJzMzM6cyMjKYQD8/xbOtqv/27ef/8unk//fy
        8P/////////////////39/f/7+/v//z8/P/09PT/8fHx//7+/v////////////7+/v/17+v/7ODY/+LQ
        xf+Qhn//NTU1ujMzM6QzMzOZMzMzGTMzMwAAAAAAAAAAADMzMwA0NDQANDQ0EDU0NKZKSUn/kY2K/97W
        0f/z6uX/9Ozn//37+///////4ODg/39/f/9zc3P/gICA/3d3d/9xcXH/tra2////////////+vf1//Pq
        5f/w5+L/tKum/2xmYv9IRkT/NDQ0gzQ0NAYzMzMAMjIyAAAAAAAAAAAAAAAAADs6OgAoKCkPTUxLw7u1
        sf+Yk5H/ta6r//Tr5v/y6eT/9/Hu//////+bm5v/oqKi/+Tk5P+IiIf/wsLB/9HR0f94eHj/7u7u//38
        +//07ej/8unk/+zj3v+hnJn/uK6o/6ibk/9APj6qKSwtBT09PQAAAAAAAAAAADMzMwAzMzMBMzMzHS0t
        LlVgXlzwzcbC/9LLx//PyMT/5t7Z//Pp5P/z6uX/+fTx/+Lh4P/z8/L//Pz//+fo+v/09P7//f39/9/f
        3//18/L/9u/r//Pq5f/y6eT/5t3Z/9PLx//SysX/tqmh/05LSeIwMDFEMzMzGDMzMwAzMzMAMzMzADMz
        MwYzMzN6MjIyyVFQT/51cnD/dHFv/3VycP/DvLj/9Ovm/+DY0//a0s3/9e7q//v49P/k4vn/qKf7/8nI
        +v/7+Pb/+fPw//Do4//Xz8v/5NvX//Tr5v/AubX/dHFv/3Rxb/9xbGr/R0VE+zIyMsAzMzNmMjIyADMz
        MwAzMzMAMzMzADMzMwMvLy9pjoqI/+zk3//q4t3/6uLd//Dn4v/o39v/a2hm/1JQT//TzMj/9Ovm//Ho
        5f/q4eb/7ubm//Lp5P/06+b/xL25/0hHR/98eXf/7+bh//Dn4v/q4d3/6uHd/+bb1v90bWn4Li4vTiwt
        LQIzMzMAMzMzAAAAAAAAAAAANDQ0ACwsLFSGgoD88unj//Dm4f/x5+H/8+nk/9/X0/9MS0v/NjY2/8O8
        uf/17Of/8unk//Pp5P/y6eT/8unk//Xs5/+vqab/Ly8v/15cW//q4d3/8unk//Lp5P/y6eT/7ePe/29q
        aPIpKio5NjU1AAAAAAAAAAAAAAAAAAAAAAA2NjYAKSorMWVhXu3aysD/4M/E/+DPxP/j08n/3c/H/2Zi
        X/9RUE//1MzI//Tr5v/y6eT/8unk//Lp5P/y6eT/9evm/8S9uf9IR0f/fHl3/+/m4f/y6eT/8unk//Pq
        5f/f19L/WFZV3CcoKB04ODgAAAAAAAAAAAAAAAAAAAAAAEE/PgA5ODgYREJB2Lannv/fzMD/3cq+/93K
        vf/dyr7/zbux/8y+tf/t4tz/8unk//Lp5P/y6eT/8unk//Lp5P/y6eT/7+bh/9fPy//k29f/8unk//Lp
        5P/y6eT/9ezn/7Ksqf87OjrDMDAwCzc3NwAAAAAAAAAAAAAAAAAAAAAAPj08AD08OxY2NTXXcmtm/9nG
        u//ey77/3cq+/93Kvv/ey7//3su//+DOw//r3tf/8unk//Lp5P/y6eT/8unk//Lp5P/y6eT/9Ovm//Pq
        5f/y6eT/9u7p//ry7v/m3tn/Z2Rj/zMzM8IxMTEKMzMzAAAAAAAAAAAAAAAAAAAAAAA9PDsALzAwFktI
        R9diXVr/l4yF/97Lv//dyr7/3cq+/93Kvv/dyr7/3cq+/97MwP/q3tb/8unk//Lp5P/y6eT/8unk//Lp
        5P/y6eT/8unk//bu6f/+9/P/9u7p/5SPjf9mYF3/RUNCwh4hIgozMzMAAAAAAAAAAAAAAAAAAAAAAD08
        OwApKisWVlJP17iro/9raGb/nJCJ/9zJvf/ey7//3cq+/93Kvv/dyr7/3cq+/9/Nwv/t4tv/8unk//Lp
        5P/y6eT/8unk//Tr5//58e3//vj0//Pr5/+alZL/dnNx/7aqov9KR0XCGBsdCjMzMwAAAAAAAAAAAAAA
        AAAAAAAAPTw7ACkqKxZUUE3X1ce+/9PLx/9wbWv/hXx2/8y7sf/gzMD/3su//93Kvv/dyr7/3cq9/+TU
        yv/x6OP/8unk//Lp5P/06+b//fby//328f/b1ND/g399/3t3dv/e1dH/ybuz/0hGRMIZHB0KMzMzAAAA
        AAAAAAAAAAAAAAAAAAA9PDwAKSorFlRQTdfTxb3/9ezn/+HY0/+Oh4P/Z2Fd/5aLhP/Ftav/2se8/9/M
        wP/gzcD/4c/D//Dl3//17Oj/9Ovm/+3l4P/Uzcn/mpWS/2llYv+YkIz/597Z//Xr5v/HurH/SUZEwhgb
        HQozMzMAAAAAAAAAAAAAAAAAAAAAAEFAPwAtLi4UUU1L0s2+tP/t39f/39DG/7Smnv9dWFX6NjY20k9L
        StNtZ2P1ioB6/52Riv+mmZH/rqWg/6ijoP+RjIr+cG1r8U1MS802NjXXaGJe/LutpP/h0cf/7d7W/8Gy
        qf9HREO+IyUmCTw8OwAAAAAAAAAAAAAAAAAAAAAAS0hGAENCQAM9PDyUfHRv/52Rif9tZmL0Q0FAuzU1
        NF46OjkXLC0uFy0uLkAyMjJpNzY2hjs6OpU7OjqUNTU1gi4vL2MoKSk5JicnEjs6Ohw3NjZoSEVEw3Ns
        Z/efk4v/dG1o/Dk5OH4AAgcAUE1LAAAAAAAAAAAAAAAAAAAAAABwZ2MANzY2ADo6ORY2NjZwODc3iTAw
        MEguLi8MJigpAEE/PgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASkhGAAsP
        EgAxMTEQMTIyUTg3N4w2NjVnOzo5Dzo5OQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////8P///wAP//wAA//4AAH/8AAA/wAAAA8AA
        AAPgAAAH4AAAB4AAAAOAAAADwAAAA+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AA/wf/4P//////////////////////////8=
</value>
  </data>
</root>